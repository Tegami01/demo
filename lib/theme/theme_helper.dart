import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.whiteA700.withOpacity(0.7),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w300,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 13.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w300,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray90001,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 58.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        headlineLarge: TextStyle(
          color: appTheme.redA200,
          fontSize: 31.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w800,
        ),
        headlineMedium: TextStyle(
          color: appTheme.blue60001,
          fontSize: 28.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 25.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 13.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w800,
        ),
        labelMedium: TextStyle(
          color: appTheme.red800,
          fontSize: 11.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 9.fSize,
          fontFamily: 'Helvetica Neue',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray700,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.black90001,
          fontSize: 15.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light();
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber600 => Color(0XFFFFB209);
  Color get amberA400 => Color(0XFFFFC600);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blackf
  Color get black9003f => Color(0X3F000000);

  // Blue
  Color get blue500 => Color(0XFF1893F4);
  Color get blue600 => Color(0XFF198AE8);
  Color get blue60001 => Color(0XFF198BE7);
  Color get blue70059 => Color(0X591477C8);
  Color get blueA400 => Color(0XFF1970F5);

  // BlueGray
  Color get blueGray400 => Color(0XFF8E8E8E);
  Color get blueGray40001 => Color(0XFF868990);
  Color get blueGray40002 => Color(0XFF8A8A96);
  Color get blueGray50 => Color(0XFFF1F1F1);

  // Cyan
  Color get cyan400 => Color(0XFF23BED1);
  Color get cyan40011 => Color(0X1121B9CB);
  Color get cyan500 => Color(0XFF0FBFD3);
  Color get cyan900 => Color(0XFF01495F);
  Color get cyanA700 => Color(0XFF04B5CA);

  // CyanAf
  Color get cyanA4003f => Color(0X3F00D8F1);

  // Gray
  Color get gray100 => Color(0XFFF7F7F7);
  Color get gray10001 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFF0F0F0);
  Color get gray20001 => Color(0XFFE7E7E7);
  Color get gray300 => Color(0XFFE6E6E6);
  Color get gray400 => Color(0XFFB2B2B2);
  Color get gray40059 => Color(0X59BCBCBC);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFF9EA0A8);
  Color get gray5002 => Color(0XFFF9F9FB);
  Color get gray600 => Color(0XFF6D6D6D);
  Color get gray60001 => Color(0XFF7F7F7F);
  Color get gray60002 => Color(0XFF808089);
  Color get gray700 => Color(0XFF545454);
  Color get gray800 => Color(0XFF3A3A3A);
  Color get gray900 => Color(0XFF252525);
  Color get gray90001 => Color(0XFF131313);

  // GrayCc
  Color get gray50Cc => Color(0XCCFAFAFA);

  // Green
  Color get green400 => Color(0XFF59CB82);
  Color get green40049 => Color(0X4965CF72);

  // LightBlue
  Color get lightBlue30059 => Color(0X5952B2FF);

  // LightGreen
  Color get lightGreen900 => Color(0XFF308600);
  Color get lightGreenA700 => Color(0XFF46C200);

  // Red
  Color get red600 => Color(0XFFE84343);
  Color get red700 => Color(0XFFDD0E2B);
  Color get red800 => Color(0XFFD41721);
  Color get redA200 => Color(0XFFF83A51);

  // Teal
  Color get teal500 => Color(0XFF00968A);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
